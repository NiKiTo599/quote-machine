{"version":3,"sources":["components/Quotes.js","App.js","serviceWorker.js","index.js"],"names":["Quotes","state","quotes","current","changeQuote","getCurrentQuote","forceUpdate","fetch","then","data","json","setState","document","body","style","setProperty","this","getRandomNumber","min","max","Math","floor","random","$","on","window","open","encodeURIComponent","quote","author","console","log","Card","id","border","text","Header","Body","className","getRandomColor","Footer","display","justifyContent","Button","onClick","href","target","React","Component","App","rel","integrity","crossorigin","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sUAIqBA,E,YACnB,aAAe,IAAD,8BACZ,+CAIFC,MAAQ,CACNC,OAAQ,KACRC,QAAS,MAPG,EAoDdC,YAAc,WACZ,EAAKC,kBACL,EAAKC,eApDL,EAAKH,QAAU,KAFH,E,iFAUO,IAAD,OAClBI,MACE,0IAECC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAI,EAAKE,SAAS,CAAET,OAAQO,EAAKP,c,uCAS7CU,SAASC,KAAKC,MAAMC,YAClB,aADF,cAESC,KAAKC,gBAAgB,EAAG,KAFjC,aAE0CD,KAAKC,gBAC3C,EACA,KAJJ,aAKQD,KAAKC,gBAAgB,EAAG,KALhC,MAOAL,SAASC,KAAKC,MAAMC,YAClB,YADF,cAESC,KAAKC,gBAAgB,EAAG,KAFjC,aAE0CD,KAAKC,gBAC3C,EACA,KAJJ,aAKQD,KAAKC,gBAAgB,EAAG,KALhC,Q,sCAScC,EAAKC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,K,wCAIhDF,KAAKb,QAAUa,KAAKf,MAAMC,OAAOc,KAAKC,gBAAgB,EAAG,MACzDM,IAAE,gBAAgBC,GAAG,SAAS,WAC5BC,OAAOC,KAAK,8EACZC,mBAAmB,IAAMX,KAAKb,QAAQyB,MAAQ,KAAOZ,KAAKb,QAAQ0B,QAAS,QAAS,uG,+BAWtF,OADAC,QAAQC,IAAIf,KAAKf,OACS,OAAtBe,KAAKf,MAAMC,QACbc,KAAKX,kBAEH,kBAAC2B,EAAA,EAAD,CAAMC,GAAG,YAAYC,OAAO,OAAOC,KAAK,aACtC,kBAACH,EAAA,EAAKI,OAAN,cACA,kBAACJ,EAAA,EAAKK,KAAN,KACE,gCAAYC,UAAU,mBACpB,uBAAGL,GAAG,QAAN,IAAejB,KAAKb,QAAQyB,MAA5B,KACA,4BAAQK,GAAG,SAASK,UAAU,qBAC3BtB,KAAKb,QAAQ0B,SAGjBb,KAAKuB,kBAER,kBAACP,EAAA,EAAKQ,OAAN,CACE1B,MAAO,CAAE2B,QAAS,OAAQC,eAAgB,kBAE1C,kBAACC,EAAA,EAAD,CACEV,GAAG,YACHK,UAAU,qBACVM,QAAS5B,KAAKZ,aAHhB,iBAOA,uBACE6B,GAAG,cACHK,UAAU,0BACVO,KAAI,qFAAgFlB,mBAAmB,IAAMX,KAAKb,QAAQyB,MAAQ,KAAOZ,KAAKb,QAAQ0B,SACtJiB,OAAO,UAEP,uBAAGR,UAAU,sBAMhB,S,GAhGyBS,IAAMC,WCoB3BC,MApBf,WACE,OACE,oCACE,yBAAKX,UAAU,aACb,yBAAKA,UAAU,iDACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,SAIN,0BACEY,IAAI,aACJL,KAAK,wEACLM,UAAU,0EACVC,YAAY,gBCNAC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAAS+C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,MAAK,SAAAuD,GACjCA,EAAaC,kB","file":"static/js/main.d38f4b70.chunk.js","sourcesContent":["import React from \"react\";\r\nimport $ from \"jquery\"\r\nimport { Card, Button } from \"react-bootstrap\";\r\n\r\nexport default class Quotes extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.current = null;\r\n  }\r\n\r\n  state = {\r\n    quotes: null,\r\n    current: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n    )\r\n      .then(data => data.json())\r\n      .then(data => this.setState({ quotes: data.quotes }));\r\n  }\r\n\r\n  getRandomColor() {\r\n    /* let letters = \"0123456789ABCDEF\";\r\n    let color = \"#\";\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    } */\r\n    document.body.style.setProperty(\r\n      \"--var-back\",\r\n      `rgb(${this.getRandomNumber(0, 255)}, ${this.getRandomNumber(\r\n        0,\r\n        255\r\n      )}, ${this.getRandomNumber(0, 255)})`\r\n    );\r\n    document.body.style.setProperty(\r\n      \"--primary\",\r\n      `rgb(${this.getRandomNumber(0, 255)}, ${this.getRandomNumber(\r\n        0,\r\n        255\r\n      )}, ${this.getRandomNumber(0, 255)})`\r\n    );\r\n  }\r\n\r\n  getRandomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  }\r\n\r\n  getCurrentQuote() {\r\n    this.current = this.state.quotes[this.getRandomNumber(0, 101)];\r\n    $(\"#tweet-quote\").on(\"click\", function() {\r\n      window.open(\"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\" +\r\n      encodeURIComponent('\"' + this.current.quote + '\" ' + this.current.author), 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\r\n    });\r\n  }\r\n\r\n  changeQuote = () => {\r\n    this.getCurrentQuote();\r\n    this.forceUpdate();\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    if (this.state.quotes !== null) {\r\n      this.getCurrentQuote();\r\n      return (\r\n        <Card id=\"quote-box\" border=\"dark\" text=\"secondary\">\r\n          <Card.Header>Quote</Card.Header>\r\n          <Card.Body>\r\n            <blockquote className=\"blockquote mb-0\">\r\n              <p id=\"text\"> {this.current.quote} </p>\r\n              <footer id=\"author\" className=\"blockquote-footer\">\r\n                {this.current.author}\r\n              </footer>\r\n            </blockquote>\r\n            {this.getRandomColor()}\r\n          </Card.Body>\r\n          <Card.Footer\r\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n          >\r\n            <Button\r\n              id=\"new-quote\"\r\n              className=\"btn_for_background\"\r\n              onClick={this.changeQuote}\r\n            >\r\n              Get new quote\r\n            </Button>\r\n            <a\r\n              id=\"tweet-quote\"\r\n              className=\"btn_for_background_link\"\r\n              href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent('\"' + this.current.quote + '\" ' + this.current.author)}`}\r\n              target=\"_blank\"\r\n            >\r\n              <i className=\"fa fa-twitter\"></i>\r\n            </a>\r\n          </Card.Footer>\r\n        </Card>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Quotes from \"./components/Quotes\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row justify-content-center align-items-center\">\n          <div className=\"col-xl-8 col-12\">\n            <Quotes />\n          </div>\n        </div>\n      </div>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n        crossorigin=\"anonymous\"\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}